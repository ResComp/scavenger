#!/bin/bash

source "$BASHLIB/libbash"

ExitMsg='You may now exit out of this shell with the keys "ctrl+d" or the "exit" command'

# This takes as input the name of the pid file. Not the path.
#
# pid files are assumed to be in RunDir
# Here a pid file is one that contains only the pid of the process
CleanupPIDFile() {
    pidFileName=$1

    pidFile="$RunDir/$pidFileName"
    # Open the pid file only if it exists
    if [ -f "$pidFile" ]; then
        pid=$(cat $pidFile)
        # Kill the process only if it's still running
        if [ -e "/proc/$pid" ]; then
            kill "$pid"
        fi
        if [ -e "/proc/$pid" ]; then
            kill -9 "$pid"
        fi
        rm -f $pidFile
    fi
}

CleanupProcess() {
    pid=$1

    if [ -e "/proc/$pid" ]; then
        kill "$pid"
    fi
    if [ -e "/proc/$pid" ]; then
        kill -9 "$pid"
    fi
}

# Runs the checker in the background and a shell for the user in the
# foreground.
RunTask() {
    # Run submission checker in the background
    Checker &
    checkerPID=$!
    # Clean up the checker upon exit
    trap 'CleanupProcess $checkerPID' EXIT

    # Run a shell for the user to play with
    # We want the exit code to be 0 no matter how the shell exits
    $SHELL || true
}

# This is a loop that reads from the submission pipe and passes the input
# to check_submission()
Checker() {
    while true; do
        if read submission < $SubmitPipe; then
            if check_submission $submission; then
                break
            fi
        fi
    done
}

# This calls the functions setup(), run(), and cleanup() as appropriate
TaskMain() {
    arg=$1

    if [ "$arg" = "setup" ]; then
        setup
    elif [ "$arg" = "run" ]; then
        run
    elif [ "$arg" = "cleanup" ]; then
        cleanup
    fi
}
