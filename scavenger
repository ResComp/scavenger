#!/bin/bash

# The Master source
source "/etc/scavenger/environment"

source "$BASHLIB/libbash"

doSetup() {
    echo -n "Initializing..."

    export PATH="$SCAVENGERSOURCEDIR/bin:$PATH"
    mkdir -p -m 700 "$SCAVENGERDATADIR" "$RunDir"
    # Flush the pipe
    rm -f "$SubmitPipe"
    mkfifo -m 600 "$SubmitPipe"

    echo "Done!"
}

preventMultipleHunts() {
    pidFileName="scavenger.pid"
    if ProcessIsRunning "$pidFileName"; then
        oldPID=$(PIDFromFile "$pidFileName")
        Announce 2 "The Hunt has already begun. It has pid $oldPID"
        exit 1
    fi
    rm -f "$(PIDFilePath "$pidFileName")"
    currentPID=$$
    CreatePIDFile "scavenger.pid" "$currentPID"
}

_usage() {
    cat <<EOF

${prog} [options] STORY

The ResComp Scavenger Hunt

Options:
    -t TASK         Run a single task and exit
    -h              Prints this help message

EOF
    exit 1
}

### Begin Main Script ###

set -e

readonly prog="${0##*/}"
curChapter=0
taskDir="$SCAVENGERSOURCEDIR/task"

unset -v opt_task
while getopts 't:h' opt ; do
    case "$opt" in
    t) opt_task=true; singleTask=$OPTARG ;;
    h) _usage ;;
    ?) _usage ;;
    esac
done
shift $((OPTIND - 1))

story=$1

doSetup
preventMultipleHunts
Announce 0 "Welcome to the ResComp Scavenger Hunt!"

if [ "$opt_task" = true ]; then
    Announce 0 "Running $singleTask"
    RunTasks "$singleTask"
    exit 0
fi

res_story="$(ResolveInPath "$SCAVENGERSTORYPATH" "$story")"
if [ -z "$story" ]; then
    $(ResolveInPath "$SCAVENGERSTORYPATH" "default")
else
    $res_story
fi

Announce 1 "You've completed the ResComp Scavenger Hunt!"
