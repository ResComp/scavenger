#!/usr/bin/env python

import sys
import os
import shutil
import subprocess as sp
import multiprocessing as mp

# scavenger imports
import libpy
import pyTask

class SamplePython(pyTask.Task):
    def __init__(self):
        self.sample_dir = "/tmp/samplePython"

    def setup(self):
        libpy.announce("Setting up!")
        os.mkdir(self.sample_dir)

    def run(self):
        run_intro="""\
Make a file inside {0} and tell me what it's called!

To submit your response:
$ submit <file_name>
"""
        libpy.announce("Running!")
        print(run_intro.format(self.sample_dir))
        # Run the checker in the background
        checker_proc = mp.Process(target=self.checker)
        checker_proc.start()
        # Start a shell for the user to play with
        shell = sp.Popen(os.environ['SHELL'])
        shell.wait()
        # Clean up the checker once the user is done
        checker_proc.terminate()

    def check_submission(self, submission):
        reminder = """\
Remember, you want to create a file in {0}/ and submit the file name
"""
        resp_file = "{0}/{1}".format(self.sample_dir, submission)
        if os.path.isfile(resp_file):
            libpy.announce("Good job!", style=libpy.BLUE)
            print(pyTask.EXIT_MSG)
            return True
        err_msg = "Error: {0} does not exist or is not a file".format(resp_file)
        libpy.announce(err_msg, style=libpy.RED)
        print(reminder.format(self.sample_dir))
        return False

    def cleanup(self):
        libpy.announce("Cleaning up!")
        shutil.rmtree(self.sample_dir)

if __name__ == "__main__":
    task = SamplePython()
    task.main(sys.argv)
